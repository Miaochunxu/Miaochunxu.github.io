<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[centos-ssh-密码登录设置]]></title>
    <url>%2F2018%2F12%2F25%2Fcentos-ssh-%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[centos设置ssh密码登录root用户下修改 sshd_config 文件12$ su - // 切换root用户$ vi /etc/ssh/sshd_config 修改PasswordAuthentication1#PasswordAuthentication yes // 去掉前面的#，使之生效 重启sshd服务1$ systemctl restart sshd]]></content>
      <categories>
        <category>服务器骚操作</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>ssh密码登录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux文件与权限]]></title>
    <url>%2F2018%2F12%2F19%2FLinux%E6%96%87%E4%BB%B6%E4%B8%8E%E6%9D%83%E9%99%90%2F</url>
    <content type="text"><![CDATA[文件相关修改文件所属用户和所属用户组123chown 修改所属用户chgrp 修改所属用户组chmod 修改权限 drwxrwxrwt 10 root root 4096 Dec 19 11:34 tmp/ --- --- ---]]></content>
      <categories>
        <category>服务器骚操作</category>
      </categories>
      <tags>
        <tag>文件权限查看与修改</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[greenplum迁移(VirtualBox)]]></title>
    <url>%2F2018%2F12%2F19%2Fgreenplum%E8%BF%81%E7%A7%BB-VirtualBox%2F</url>
    <content type="text"><![CDATA[版本信息 greenplum:5.14.0 vagrant box: centos/7:1804.02 集群一： gpstage1(master) gpstage2 gpstage3 集群二： gppro1(master) gppro2 gppro3 12目标：集群一是数据源，也就是创建了数据库的greenplum集群，现在的目标是把集群一上的greenplum完全的迁移到集群二上注意点：保持集群二和集群一的greenplum配置信息一致。 修改数据库网络配置postgres默认会阻止其它网络对其的访问和操作，所以需要添加信任网络 集群一上添加信任网络方法123456进入postgres安装目录，也就是greenplum安装时，master节点data所在的位置$ vi pg_hba.conf添加host all gpadmin ipv4address/32 trust 参数说明 ipv4address: 目标数据库ip地址(在集群一中配置信任集群二网络，让集群二可以访问到集群一，从而实现数据迁移操作) /32 : 完全匹配地址 例如: 172.16.1.2/32 : 只有172.16.1.2是受信任的 172.16.1.2/24 : 受信任的是172.16.1.1 ～ 172.16.1.255 计算方式是 8位.8位.8位.8位/相加得出结果 迁移官方文档https://gpdb.docs.pivotal.io/590/utility_guide/admin_utilities/gpcopy.html 1nohup gpcopy --source-host gpstage1 --source-port 5432 --source-user gpadmin --dest-host gppro1 --dest-port 5432 --dest-user gpadmin --full --truncate --no-distribution-check --jobs 1 --validate count &gt; gpcopy.20181219.1008.log &amp; 简单说明 1234567891011121314151617181920# nohup: 不间断运行命令，即使关闭窗口也没问题# gpcopy: 迁移指令，高版本# --source-host: 源数据库hostname(集群一的master节点)# --source-port: 源数据库端口号# --source-user: 源数据库用户名(greenplum安装时指定的用户)# --dest-host: 迁移目标数据库的hostname(集群二的master节点)# --dest-port: 目标数据库端口号# --dest-user: 目标数据库用户名，与集群一一致# --full: 指定迁移greenplum里所有数据库对象(其它类似迁移某个表等操作请查阅官方文档)# 如果遇到目标数据库中已经存在某个相同的表，可执行一下操作 # --skip-existing: 跳过 # --truncate: 清空表数据 # --drop: 删除表并重新创建 # --append: 在原来的基础上添加数据# --no-distribution-check: 禁用表数据分布检查# --jobs: 指定gpcopy并行进程数，默认为4，产生 2 * n + 1 个数据库连接(默认是9个)# --validate: copy之后对数据进行验证，验证类型： 1、count: 比较源数据库和目标数据库的行数 2、md5xor: 所有行MD5验证，然后对MD5执行XOR# &gt; ... &amp;: nohup命令 ... 打印日志的文件名; &amp; 后台运行 使用tail指令查看gpcopy进程1$ tail -f gpcopy.20181219.1008.log]]></content>
      <categories>
        <category>greenplum</category>
      </categories>
      <tags>
        <tag>migrate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VirtualBox安装greenplum]]></title>
    <url>%2F2018%2F12%2F19%2FVirtualBox%E5%AE%89%E8%A3%85greenplum%2F</url>
    <content type="text"><![CDATA[版本信息(安装环境) 操作系统: macOS Mojave; Version: 10.14.2 虚拟机: VirtualBox: V5.2.22 Vagrant: V2.2.2 创建与启动虚拟机使用vagrant创建与管理虚拟机Vagrantfile 12345678910111213141516171819Vagrant.configure("2") do |config| # 虚拟机系统版本 config.vm.box = "centos/7" config.vm.box_version = "1804.02" # 循环创建虚拟机 (1..3).each do |i| config.vm.define "gppro#&#123;i&#125;" do |gppro| gppro.vm.network "public_network", ip: "172.16.1.21#&#123;i&#125;" gppro.vm.hostname = "gppro#&#123;i&#125;" end end config.vm.provider "virtualbox" do |v| v.memory = 2048 v.cpus = 1 endend 启动虚拟机在Vagrantfile文件所在目录下执行 1$ vagrant up 查看启动状态 1$ vagrant status 安装所需依赖与修改系统配置系统配置依赖安装(master和所有segment节点)进入虚拟机 1$ vagrant gppro1 所有虚拟机上在root用户下安装应用 12$ su - // 进入root用户[root@gppro1 ~]$ yum install net-tools ntp net-tools : 网络管理 ntp : 网络时间协议，用于同步各个虚拟机的时间 修改ssh密码登录，允许密码登录(master和所有segment节点)root用户下修改sshd_config文件 12345$ vi /etc/ssh/sshd_config# PasswordAuthentication yes // 去掉 # 打开 PasswordAuthentication$ systemctl restart sshd // 重启sshd 服务 修改安全策略(master和所有segment节点) 禁用SELinux 1234$ sestatus // 查看SELinux状态$ vi /etc/selinux/config // 打开配置文件SELINUX=enforcing 改成 SELINUX=disabled 修改后的状态(需要reboot)： 123$ sestatusSELinux status: disabled 关闭防火墙12345$ systemctl status firewalld //查看防火墙状态$ systemctl stop firewalld.service // 关闭防火墙$ systemctl disable firewalld.service // 禁止启动防火墙 reboot后查看状态： 123456$ systemctl status firewalldfirewalld.service - firewalld - dynamic firewall daemon Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled) Active: inactive (dead) Docs: man:firewalld(1) 修改内核参数1$ vi /etc/sysctl.conf 12345678910111213141516171819202122# 指定内核所允许的最大共享内存段的大小kernel.shmmax = 500000000kernel.shmmni = 4096 //kernel.shmall = 4000000000kernel.sem = 250 512000 100 2048kernel.sysrq = 1kernel.core_uses_pid = 1kernel.msgmnb = 65536kernel.msgmax = 65536kernel.msgmni = 2048net.ipv4.tcp_syncookies = 1net.ipv4.conf.default.accept_source_route = 0# 表示开启TCP连接中TIME-WAIT Sockets的快速回收，默认为0，表示关闭。net.ipv4.tcp_tw_recycle = 1net.ipv4.tcp_max_syn_backlog = 4096net.ipv4.conf.all.arp_filter = 1net.ipv4.ip_local_port_range = 10000 65535net.core.netdev_max_backlog = 10000net.core.rmem_max = 2097152net.core.wmem_max = 2097152vm.overcommit_memory = 2 重启生效 修改件文件和进程读取数限制root 用户下 1$ vi /etc/security/limits.conf 123456# 任意一个用户可以打开的最大的文件数 * 代表所有* soft nofile 65536* hard nofile 65536# 任意一个用户可以打开的最大的进程数 * 代表所有* soft nproc 131072* hard nproc 131072 注: hard 是阀值,超过就会报错 – soft 是警告值 修改文件挂载方式root 用户下 1$ vi /etc/fstab 1/dev/mapper/VolGroup00-LogVol00 / xfs defaults 0 0 defaults改为nodev,noatime,nobarrier,inode64 1/dev/mapper/VolGroup00-LogVol00 / xfs nodev,noatime,nobarrier,inode64 0 0 修改预读数root 用户下 12# 查看 blockdev$ blockdev --getra /dev/sda 12# 临时修改,重启后失效$ blockdev --setra 16384 /dev/sda 123# 将修改命令写入/etc/rc.d/rc.local，否则重启后会失效$ echo '/sbin/blockdev --setra 16384 /dev/sda' &gt;&gt; /etc/rc.d/rc.local$ chmod u+x /etc/rc.d/rc.local 重启验证 调整I/O scheduler (I/O 调度器)root 用户下 1234# 查看当前调度器状态$ cat /sys/block/sda/queue/scheduler[noop] deadline cfq 三种调度器简介: noop: Noop调度器是一个非常特殊的调度器。它不会对特殊请求进行优先处理，它将全部的IO请求都放到一个FIFO队列中。同时，它还会对相似的请求进行合并。 deadline: Deadline调度器，会创建两个队列，一个读队列，一个写队列。并且每个IO请求都会有一个与其相关联的过期时间戳。 cfq: CFQ的全称是Complete Fairness Queueing。工作原理: 先创建一个IO请求队列，然后将要访问磁盘上相邻数据的请求放到一起，按照这种方式进行排序之后，再依次处理IO请求队列中的请求。 修改调度器为deadline 123456789101112# 临时生效$ echo deadline &gt; /sys/block/sda/queue/scheduler# 查看修改状态$ cat /sys/block/sda/queue/schedulernoop [deadline] cfq# 永久生效$ grubby --update-kernel=ALL --args="elevator=deadline"# reboot 检查 关闭THP(transparent_hugepage)root用户下 12345$ grubby --update-kernel=ALL --args="transparent_hugepage=never"# 查看结果$ cat /sys/kernel/mm/*transparent_hugepage/enabledalways madvise [never] 删除 IPCroot用户下 1234567$ vi /etc/systemd/logind.conf# 打开 RemoveIPC=noRemoveIPC=no# 重启服务$ service systemd-logind restart systemd-logind 是一个管理用户登录的系统服务。 GreenPlum 相关所有节点上设置hostsroot用户下 12345$ vi /etc/hosts172.16.1.211 gppro1172.16.1.212 gppro2172.16.1.213 gppro3 在master上创建gpadmin用户root用户下 12345678# 用户组添加pgadmin$ groupadd gpadmin# 添加pgadmin用户$ useradd gpadmin -g gpadmin# pgadmin用户设置密码,输入两遍密码确认$ passwd gpadmin 在master上安装greenplums数据库root用户下 12# 运行安装包,安装在默认目录(也可自己定义)$ bash greenplum-db-5.14.0-rhel7-x86_64.bin 注： 如果要在gpadmin用户下安装，那么需要先用gpadmin创建好安装目录,最好的选择是安装到gpadmin用户目录下。 root用户安装的话，修改文件权限12$ chown -R gpadmin /usr/local/greenplum*$ chgrp -R gpadmin /usr/local/greenplum* master上创建hostlist和seglistgpadmin下创建123456$ cd /home/gpadmin$ mkdir conf$ cd conf$ touch hostlist$ touch seglist hostlist 123gppro1gppro2gppro3 seglist 12gppro2gppro3 设置ssh免密登录(只在master上做)root用户下 123456$ gpssh-exkeys -f /home/gpadmin/conf/hostlist...[INFO] completed successfully 通过gpseginstall在segment上数据库(在master机器上操作)root用户下操作 123456$ gpseginstall -f /home/gpadmin/conf/seglist...[INFO] completed successfully 创建数据存储区(在master上操作)root用户下 123# 创建master机器目录$ mkdir -p /data/master$ chown gpadmin:gpadmin /data/master 创建所有节点目录 1234567$ source /usr/local/greenplum-db/greenplum_path.sh# 使用gpssh批量创建存储目录$ gpssh -f /home/gpadmin/conf/seglist -e 'mkdir -p /data/primary'# 批量修改segment节点的文件权限$ gpssh -f /home/gpadmin/conf/seglist -e 'chown gpadmin:gpadmin /data/primary' 注： gpssh -f: 引用哪个文件 -e: 执行什么指令 ntp同步root用户下 master节点上 1234$ vi /etc/ntp.conf# 添加server 202.108.6.95 #cn.ntp.org.cn segment节点上 1234$ vi /etc/ntp.conf# 添加server gppro1 prefer 在master节点上 1234567891011121314151617181920$ gpssh -f /home/gpadmin/conf/hostlist -v -e 'ntpd'[WARN] Reference default values as $MASTER_DATA_DIRECTORY/gpssh.conf could not be foundUsing delaybeforesend 0.05 and prompt_validation_timeout 1.0[Reset ...][INFO] login gppro1[INFO] login gppro2[INFO] login gppro3[gppro1] ntpd[gppro2] ntpd[gppro3] ntpd[INFO] completed successfully[Cleanup...]# 所有节点重置ntp服务$ gpssh -f /home/gpadmin/conf/hostlist -e 'systemctl disable chronyd.service'$ gpssh -f /home/gpadmin/conf/hostlist -e 'systemctl enable ntpd.service'$ gpssh -f /home/gpadmin/conf/hostlist -e 'systemctl start ntpd.service' 验证(master上操作) 1$ gpcheck -f /home/gpadmin/conf/hostlist -m mdw 初始化greenplum(master节点上操作)gpadmin用户下 1$ su - gpadmin 准备gpinitsystem所需文件 gpinitsystem_config 123456789101112131415161718$ cp /usr/local/greenplum-db/docs/cli_help/gpconfigs/gpinitsystem_config /home/gpadmin/conf/gpinitsystem_config$ vi /home/gpadmin/conf/gpinitsystem_config# 修改declare -a DATA_DIRECTORY=(/data1/primary /data1/primary /data1/primary /data2/primary /data2/primary /data2/primary)=&gt; declare -a DATA_DIRECTORY=(/data/primary)------------MASTER_HOSTNAME=mdw=&gt;MASTER_HOSTNAME=gppro1 运行初始化命令 1$ gpinitsystem -c /home/gpadmin/conf/gpinitsystem_config -h /home/gpadmin/conf/seglist 可以按照提示添加export 1234567891011$ cd$ vi .bashrc# 添加export MASTER_DATA_DIRECTORY=/data/master/gpseg-1# 添加source,不用每次都sourcesource /usr/local/greenplum-db/greenplum_path.sh# .bashrc 生效$ source .bashrc 允许其他的ip访问greenplum 1234# 根据提示$ vi /data/master/gpseg-1/pg_hba.conf# 添加相应的ip规则 注：如果找不到gpinitsystem命令： source /usr/local/greenplum-db/greenplum_path.sh]]></content>
      <categories>
        <category>greenplum</category>
      </categories>
      <tags>
        <tag>VirtualBox</tag>
        <tag>greenplum</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker安装greenplum]]></title>
    <url>%2F2018%2F12%2F19%2Fdocker%E5%AE%89%E8%A3%85greenplum%2F</url>
    <content type="text"></content>
      <categories>
        <category>greenplum</category>
      </categories>
      <tags>
        <tag>greenplum安装</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos安全相关操作]]></title>
    <url>%2F2018%2F12%2F17%2Fcentos%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[系统相关查看系统版本centos1cat /etc/redhat-release SELinux安全增强型 Linux SELinux作用SELinux 限制服务进程对资源的访问 SELinux模式(强制/宽容/关闭)12345enforcing: 强制模式。违反 SELinux 规则的行为将被阻止并记录到日志中。permissive: 宽容模式。违反 SELinux 规则的行为只会记录到日志中。一般为调试用。disabled: 关闭 SELinux。 修改模式方法123$ vi /etc/selinux/config修改 SELINUX=enforcing 为相应的模式，重启服务器生效 安全机制(文件/进程)格式：system_u:object_r:net_conf_t:s0 &nbsp; 用户(User) 角色(Role) 类型(Type) 级别(Level) 文件相关 system_u: 系统创建的文件 unconfined_u: 用户创建的文件 object_r: 代表文件 需要文件和进程类型相同，才能访问 MLS安全等级 进程相关 system_u: 系统服务进程，受管制 unconfined_u: 不受管制的进程，通常为用户自己创建的进程 system_r: 系统服务进程，受管制 unconfined_r: 不受管制的进程，通常为用户自己创建的进程 需要文件和进程类型相同，才能访问 MLS安全等级 基本使用查看文件的安全上下文(SELinux进程权限)123456$ ls -Z [文件名]例：$ ls -Z /etc/hosts-rw-r--r--. root root system_u:object_r:net_conf_t:s0 hosts]]></content>
      <categories>
        <category>服务器骚操作</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VirtualBox+vagrant]]></title>
    <url>%2F2018%2F12%2F14%2FVirtualBox-vagrant%2F</url>
    <content type="text"><![CDATA[使用vagrant管理与操作VirtualBox VirtualBox 与 vagrant 的安装为前提，官网下载安装包或者brew安装都可 基本命令123456vagrant initvagrant upvagrant haltvagrant destroyvagrant boxvagrant plugin vagrant-scp 安装拷贝宿主机文件到虚拟机内部，可以使用vagrant插件来实现scp 安装 1vagrant plugin install vagrant-scp 使用 1vagrant scp &lt;location_file_url&gt; [vm_name]:&lt;vm_url&gt;]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
      <tags>
        <tag>VirtualBox</tag>
        <tag>vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker那些坑的解决办法记录]]></title>
    <url>%2F2018%2F12%2F11%2FDocker%E9%82%A3%E4%BA%9B%E5%9D%91%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[docker下 centos 使用 systemctl 命令 解决办法加上 –privileged=true 和init(/usr/sbin/init)1docker run -d --name centos7 -p 8090:80 --privileged=true centos_nginx:1.0 /usr/sbin/init]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker-systemctl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown常用语法]]></title>
    <url>%2F2018%2F12%2F11%2FMarkdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[标题#数量 1～6 代表一级到6级标题 1# 这是一级标题 文字相关 强调 123*斜体***加粗*****加粗斜体*** 注：都不带空格 字号 123456&lt;small&gt;&lt;small&gt;小小号&lt;/small&gt;&lt;/small&gt;&lt;small&gt;小号&lt;/small&gt;正常&lt;big&gt;大号&lt;/big&gt;&lt;big&gt;&lt;big&gt;大大号&lt;/big&gt;&lt;/big&gt;&lt;big&gt;... 小小号小号正常 大号大大号 颜色 12&lt;font color=&quot;#d9534f&quot;&gt;d9534f&lt;/font&gt;&lt;font color=&quot;red&quot;&gt;red&lt;/font&gt; d9534f red 列表123*、-、+ 任意一个效果相同(无序)1 2 3 数字为有序列表 分隔符1*** 或 --- 中划线与下划线12~~中划线~~&lt;u&gt;下划线&lt;/u&gt; 行内元素1`这是行内元素` start 这是行内元素 end 表格1234姓名|性别|年龄|爱好:---:|:---:|:--:|:---: // 在其上方是表头 :==,:==:,==: 左对齐,居中,右对齐Steve|男|8|篮球Steven|女|20|足球 姓名 性别 年龄 爱好 Steve 男 8 篮球 Steven 女 20 足球 文字上下标注12上标&lt;sup&gt;上标&lt;/sup&gt;下标&lt;sub&gt;下标&lt;/sub&gt; 上标 上标 下标 下标 勾选12- [ ] 未勾选- [x] 勾选 注：x 是字母x 未勾选 勾选]]></content>
      <categories>
        <category>能上天的工具集</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[imageMagick图片处理]]></title>
    <url>%2F2018%2F12%2F11%2FimageMagick%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[mac上安装 imageMagick通过brew方式 1$ brew install imagemagick 修改图片质量(大小)把a.jpg 缩小质量为 70 生成新的 b.jpg 1$ convert -quality 70 -strip a.jpg b.jpg -strip 为删除一些图片自带的配置信息，进一步减小图片大小 修改图片尺寸1、a.jpg 尺寸为 500x500 将a.jpg 修改成 100x100 的尺寸 1$ convert -resize 100x100 a.jpg b.jpg 2、强制转换图片尺寸：1$ convert -resize '100x100!' a.jpg b.jpg 3、图片尺寸判断：图片尺寸全部 大于/小于 设置的尺寸才会进行操作12$ convert -resize '100x100&gt;' a.jpg b.jpg$ convert -resize '100x100&lt;' a.jpg b.jpg 注：100x100 中的是字母 x 不是 * 图片添加水印(文本的方式)1、居中水印1convert -fill &apos;rgba(221, 34, 17, 0.25)&apos; -pointsize 36 -gravity center -draw &apos;text 0,0 &quot;miaochunxu.cn&quot;&apos; a.png b.png 2、倾斜平铺1convert -size 150x150 xc:none -fill &apos;#f5871f&apos; -pointsize 20 -gravity center -draw &apos;rotate -45 text 0,0 &quot;miaochunxu.cn&quot;&apos; -resize 60% miff:- | composite -tile -dissolve 20 - a.png b.png 原理为先用文本生成一个图片，然后把图片合并 -size: 图片尺寸 xc: 画布背景 none: 透明 -fill: 文本颜色 -pointsize: 文本大小 -gravity: 文本位置 center northwest north northEast west east southwest south southeast -draw: 绘图操作 rotate: 旋转角度 text: 绘制文本 0,0: 表示偏移角度 miaochunxu.cn: 文本内容 miff: 作为图像元素传递的中间件 -: 声明标准输出 |: 管道符 composite: 图片组合命令 -tile: 平铺 -dissolve: 平铺透明度 a.png: 原始图片 b.png: 生成水印图片名字]]></content>
      <categories>
        <category>能上天的工具集</category>
      </categories>
      <tags>
        <tag>imageMagick</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github-cname-操作]]></title>
    <url>%2F2018%2F12%2F10%2Fgithub-cname-%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[github(hexo &amp;&amp; next theme) 设置cname 假设 github 博客的访问地址是：https://a.github.io 域名是：a.comgithub 操作 1、创建CNAME文件，注：文件必须是全大写12$ touch CNAME$ vi CNAME 2、写入:1a.com 3、提交代码并设置https1setting =&gt; GitHub Pages 下的 Enforce HTTPS 强制使用https协议 域名解析提供商(阿里云) 操作1、添加解析记录 如下图 主机记录: 可以使用@ 或者 www，图中我使用了二级域名 blog 记录值: 你的github.io地址,确认即可 等待生效。]]></content>
      <categories>
        <category>Github呦呦</category>
      </categories>
      <tags>
        <tag>github-cname</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker入坑基本]]></title>
    <url>%2F2018%2F12%2F10%2FDocker%E5%85%A5%E5%9D%91%E5%9F%BA%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[Docker build1docker build -t [image:version] . 说明，如果要上传到docker-hub, image名字最好带上用户名，比如docker build -t miaochunxu/centos_nginx:1.0 .方便docker push,其中的. 代表dockerfile就在当前目录 docker push提交到docker hub 1docker push miaochunxu/centos_nginx:1.0 如果build的时候没有带上用户名，则需要打tag 1docker tag centos_nginx:1.0 miaochuxnu/centos_nginx:1.0 然后再push]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[命令行]]></title>
    <url>%2F2018%2F12%2F10%2F%E5%91%BD%E4%BB%A4%E8%A1%8C%2F</url>
    <content type="text"></content>
      <categories>
        <category>服务器骚操作</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[koa2入门使用]]></title>
    <url>%2F2018%2F12%2F10%2Fkoa2%E6%85%A2%E6%85%A2%E5%AD%A6%2F</url>
    <content type="text"></content>
      <categories>
        <category>后端那些事</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>koa2</tag>
        <tag>restful api</tag>
      </tags>
  </entry>
</search>
